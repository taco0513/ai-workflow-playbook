user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    # MIME 타입
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # 로그 형식
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for" '
                   'rt=$request_time uct="$upstream_connect_time" '
                   'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    # 성능 최적화
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 10M;

    # Gzip 압축
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml
        application/rss+xml
        application/atom+xml
        image/svg+xml;

    # 보안 헤더
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Rate Limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=general:10m rate=50r/s;

    # 업스트림 서버 정의
    upstream ai_workflow_app {
        server ai-workflow-playbook:3000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # HTTP to HTTPS 리다이렉트 (프로덕션)
    server {
        listen 80;
        server_name _;
        
        # Let's Encrypt 인증서 갱신
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        location / {
            return 301 https://$host$request_uri;
        }
    }

    # HTTPS 메인 서버
    server {
        listen 443 ssl http2;
        server_name _;

        # SSL 설정
        ssl_certificate /etc/nginx/ssl/certificate.crt;
        ssl_certificate_key /etc/nginx/ssl/private.key;
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;
        ssl_session_tickets off;

        # 최신 SSL 프로토콜만 사용
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;

        # HSTS
        add_header Strict-Transport-Security "max-age=63072000" always;

        # 루트 디렉토리
        root /usr/share/nginx/html;
        index index.html;

        # API 요청 프록시
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://ai_workflow_app/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # 타임아웃 설정
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # 헬스체크
        location /health {
            proxy_pass http://ai_workflow_app/health;
            access_log off;
        }

        # 메트릭스
        location /metrics {
            proxy_pass http://ai_workflow_app/metrics;
            allow 127.0.0.1;
            allow 172.20.0.0/16;  # Docker network
            deny all;
        }

        # 정적 파일 서빙
        location / {
            limit_req zone=general burst=100 nodelay;
            
            proxy_pass http://ai_workflow_app/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 캐싱 설정
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                expires 1M;
                add_header Cache-Control "public, immutable";
                add_header X-Cache-Status "STATIC";
            }
        }

        # 보안 - 숨김 파일 접근 금지
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        # 보안 - 민감한 파일 접근 금지
        location ~* \.(env|log|md)$ {
            deny all;
            access_log off;
            log_not_found off;
        }

        # 에러 페이지
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /404.html {
            root /usr/share/nginx/html;
            internal;
        }
        
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }
    }

    # 개발 환경용 HTTP 서버 (HTTPS 비활성화 시)
    server {
        listen 80;
        server_name localhost;

        # 메인 애플리케이션
        location / {
            proxy_pass http://ai_workflow_app/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # 헬스체크
        location /health {
            proxy_pass http://ai_workflow_app/health;
            access_log off;
        }

        # 메트릭스 (개발환경에서는 접근 제한 없음)
        location /metrics {
            proxy_pass http://ai_workflow_app/metrics;
        }
    }
}
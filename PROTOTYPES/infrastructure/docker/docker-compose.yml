version: '3.8'

services:
  # AI Workflow Playbook 메인 서비스
  ai-workflow-playbook:
    build: .
    container_name: ai-workflow-playbook
    restart: unless-stopped
    ports:
      - "3000:3000"
      - "3001:3001"  # Visual Builder
      - "3002:3002"  # Interview Bot
    environment:
      - NODE_ENV=production
      - PORT=3000
      - ENABLE_CACHE=true
      - BUILD_CACHE_DIR=/app/.cache
      - MAX_WORKERS=4
      - CONCURRENT_LIMIT=2
      - DEBUG=false
    volumes:
      - ./PROTOTYPES:/app/prototypes:ro
      - ./cache:/app/.cache
      - ./logs:/app/logs
      - ./projects:/app/projects
    networks:
      - ai-workflow-network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis 캐시 서버
  redis:
    image: redis:7-alpine
    container_name: ai-workflow-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai-workflow-network
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Nginx 리버스 프록시
  nginx:
    image: nginx:alpine
    container_name: ai-workflow-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - ai-workflow-network
    depends_on:
      - ai-workflow-playbook
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 모니터링 - Prometheus (선택사항)
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-workflow-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - ai-workflow-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring

  # 로그 수집 - Grafana (선택사항)
  grafana:
    image: grafana/grafana:latest
    container_name: ai-workflow-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - ai-workflow-network
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123!
      - GF_USERS_ALLOW_SIGN_UP=false
    profiles:
      - monitoring

networks:
  ai-workflow-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local